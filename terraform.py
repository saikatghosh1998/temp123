import subprocess
import os
import json

def run_command(cmd):
    """Runs a shell command and prints the output"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    print(result.stdout)

def merge_state_files():
    """Find and merge all Terraform state files into a single state"""
    main_state = "terraform.tfstate"
    state_files = []
    
    # Find all Terraform state files generated by Terraformer
    for root, _, files in os.walk("generated/aws/"):
        for file in files:
            if file == "terraform.tfstate":
                state_files.append(os.path.join(root, file))

    if not state_files:
        print("No Terraform state files found.")
        return

    # Loop through each state file and merge
    for state_file in state_files:
        print(f"ðŸ”„ Merging {state_file} into {main_state}")
        
        # Get all resources in the state file
        with open(state_file, "r") as file:
            state_data = json.load(file)
            for resource in state_data["resources"]:
                resource_type = resource["type"]
                resource_name = resource["name"]

                # Construct Terraform resource path
                terraform_resource = f"{resource_type}.{resource_name}"
                
                # Move the resource to the main state
                run_command(f"terraform state mv -state={state_file} -state-out={main_state} {terraform_resource} {terraform_resource}")

        # Remove the old state file after merging
        os.remove(state_file)

# Initialize Terraform
run_command("terraform init")

# Merge Terraformer state files
merge_state_files()

# Verify the merged state
run_command("terraform plan")


--------------------------
terraformer import aws --resources=ec2,s3,rds,iam,lambda,vpc,subnet,elb,dynamodb --regions=us-east-1 --path-pattern=generated
-----------------------------
terraform state list

